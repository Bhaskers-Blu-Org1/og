/*
 * Copyright (C) 2005-2015 Cleversafe, Inc. All rights reserved.
 * 
 * Contact Information: Cleversafe, Inc. 222 South Riverside Plaza Suite 1700 Chicago, IL 60606, USA
 * 
 * licensing@cleversafe.com
 */

package com.cleversafe.og.supplier;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Map;

import com.cleversafe.og.api.Body;
import com.cleversafe.og.api.Method;
import com.cleversafe.og.api.Operation;
import com.cleversafe.og.api.Request;
import com.cleversafe.og.http.Credential;
import com.cleversafe.og.http.HttpRequest;
import com.cleversafe.og.http.Scheme;
import com.cleversafe.og.util.Context;
import com.google.common.base.Function;
import com.google.common.base.Joiner;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;

/**
 * A supplier of requests
 * 
 * @since 1.0
 */
public class RequestSupplier implements Supplier<Request> {
  private static final Joiner.MapJoiner PARAM_JOINER = Joiner.on('&').withKeyValueSeparator("=");
  private final Function<Map<String, String>, String> id;
  private final Method method;
  private final Scheme scheme;
  private final Function<Map<String, String>, String> host;
  private final Integer port;
  private final String uriRoot;
  private final Function<Map<String, String>, String> container;
  private final Function<Map<String, String>, String> object;
  private final Map<String, Function<Map<String, String>, String>> queryParameters;
  private final boolean trailingSlash;
  private final Map<String, Function<Map<String, String>, String>> headers;
  private final List<Function<Map<String, String>, String>> context;
  private final Function<Map<String, String>, Credential> credentials;
  private final Function<Map<String, String>, Body> body;
  private final boolean virtualHost;
  private final Operation operation;

  /**
   * Creates an instance
   * 
   * @param id a supplier of ids to uniquely identify each request that is generated by this
   *        instance
   * @param method
   * @param scheme
   * @param host
   * @param port
   * @param uriRoot the base url part e.g. /soh/, /, /s3/
   * @param container
   * @param object
   * @param queryParameters static query parameters to all requests
   * @param trailingSlash whether or not to add a trailing slash to the url
   * @param headers headers to add to each request; header values may be dynamic
   * @param context request metadata to be sent with the created request
   * @param credentials username/password or keystone token
   * @param body a description of the request body to add to the request
   */
  // FIXME refactor username, password, and keystoneToken so they are embedded in headers rather
  // than separate fields
  public RequestSupplier(final Operation operation, final Function<Map<String, String>, String> id,
      final Method method, final Scheme scheme, final Function<Map<String, String>, String> host,
      final Integer port, final String uriRoot,
      final Function<Map<String, String>, String> container,
      final Function<Map<String, String>, String> object,
      final Map<String, Function<Map<String, String>, String>> queryParameters,
      final boolean trailingSlash, final Map<String, Function<Map<String, String>, String>> headers,
      final List<Function<Map<String, String>, String>> context,
      final Function<Map<String, String>, Credential> credentials,
      final Function<Map<String, String>, Body> body, final boolean virtualHost) {

    this.id = id;
    this.method = checkNotNull(method);
    this.scheme = checkNotNull(scheme);
    this.host = checkNotNull(host);
    this.port = port;
    this.uriRoot = uriRoot;
    this.container = container;
    this.object = object;
    this.queryParameters = ImmutableMap.copyOf(queryParameters);
    this.trailingSlash = trailingSlash;
    this.headers = ImmutableMap.copyOf(headers);
    this.context = ImmutableList.copyOf(context);
    this.credentials = credentials;
    this.body = body;
    this.virtualHost = virtualHost;
    this.operation = operation;
  }

  @Override
  public Request get() {
    final Map<String, String> requestContext = Maps.newHashMap();

    // populate the context map with any relevant metadata for this request
    for (final Function<Map<String, String>, String> function : this.context) {
      // return value for context functions is ignored
      function.apply(requestContext);
    }

    final HttpRequest.Builder builder =
        new HttpRequest.Builder(this.method, getUrl(requestContext), this.operation);

    for (final Map.Entry<String, Function<Map<String, String>, String>> header : this.headers
        .entrySet()) {
      builder.withHeader(header.getKey(), header.getValue().apply(requestContext));
    }

    if (this.id != null) {
      builder.withContext(Context.X_OG_REQUEST_ID, this.id.apply(requestContext));
    }

    if (credentials != null) {
      Credential credential = this.credentials.apply(requestContext);
      String username = credential.getUsername();
      String password = credential.getPassword();
      String keystoneToken = credential.getKeystoneToken();

      if(username != null)
        builder.withContext(Context.X_OG_USERNAME, username);
      if(password != null)
        builder.withContext(Context.X_OG_PASSWORD, password);
      if(keystoneToken != null)
        builder.withContext(Context.X_OG_KEYSTONE_TOKEN, keystoneToken);
    }

    for (final Map.Entry<String, String> entry : requestContext.entrySet()) {
      builder.withContext(entry.getKey(), entry.getValue());
    }

    if (this.body != null) {
      builder.withBody(this.body.apply(requestContext));
    }

    return builder.build();
  }

  private URI getUrl(final Map<String, String> context) {

    final StringBuilder s = new StringBuilder().append(this.scheme).append("://");
    appendHost(s, context);
    appendPort(s);
    appendPath(s, context);
    appendTrailingSlash(s);
    appendQueryParams(s, context);

    try {
      return new URI(s.toString());
    } catch (final URISyntaxException e) {
      // Wrapping checked exception as unchecked because most callers will not be able to handle
      // it and I don't want to include URISyntaxException in the entire signature chain
      throw new IllegalArgumentException(e);
    }
  }

  private void appendHost(final StringBuilder s, final Map<String, String> context) {
    if (this.virtualHost) {
      if(this.container != null) {
        s.append(this.container.apply(context)).append(".");
      }
    }

    s.append(this.host.apply(context));
  }

  private void appendPort(final StringBuilder s) {
    if (this.port != null) {
      s.append(":").append(this.port);
    }
  }

  private void appendPath(final StringBuilder s, final Map<String, String> context) {
    if (!this.virtualHost) {
      s.append("/");
      if (this.uriRoot != null) {
        s.append(this.uriRoot).append("/");
      }

      if (this.container != null) {
        s.append(this.container.apply(context));
      }
    }

    if (this.object != null) {
      s.append("/").append(this.object.apply(context));
    }
  }

  private void appendTrailingSlash(final StringBuilder s) {
    if (this.trailingSlash) {
      s.append("/");
    }
  }

  private void appendQueryParams(final StringBuilder s, final Map<String, String> context) {
    final Map<String, String> queryParamsMap = Maps.newHashMap();

    for (final Map.Entry<String, Function<Map<String, String>, String>> queryParams : this.queryParameters
        .entrySet()) {
      queryParamsMap.put(queryParams.getKey(), queryParams.getValue().apply(context));
    }

    final String queryParams = PARAM_JOINER.join(queryParamsMap);
    if (queryParams.length() > 0) {
      s.append("?").append(queryParams);
    }
  }

  @Override
  public String toString() {
    return String.format(
        "RequestSupplier [%n" + "method=%s,%n" + "scheme=%s,%n" + "host=%s,%n" + "port=%s,%n"
            + "uriRoot=%s,%n" + "container=%s,%n" + "object=%s,%n" + "queryParameters=%s,%n"
            + "trailingSlash=%s,%n" + "headers=%s,%n" + "body=%s%n" + "]",
        this.method, this.scheme, this.host, this.port, this.uriRoot, this.container, this.object,
        this.queryParameters, this.trailingSlash, this.headers, this.body);
  }
}
